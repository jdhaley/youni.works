{
	"type": "object",
	"constructor": "package",
	"part": {
		"": {
			"facet": "package",
			"type": "string",
			"source": "youni.works/base/control"
		},
		"Control": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				},
				"controller": {
					"facet": "type",
					"type": "string",
					"source": "Controller"
				},
				"part": {
					"facet": "type",
					"type": "string",
					"source": "Part"
				},
				"receive": {
					"type": "function",
					"source": "function(message) {\r\n\t\t\tthis.controller.process(this, message);\r\n\t\t}"
				}
			}
		},
		"Controller": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Control"
				},
				"use": {
					"type": "object",
					"constructor": "type",
					"part": {
						"Part": {
							"facet": "type",
							"type": "string",
							"source": "Record"
						}
					}
				},
				"log": {
					"type": "object"
				},
				"process": {
					"type": "function",
					"source": "function(on, message) {\r\n\t\t\tlet action = message.action;\r\n\t\t\twhile (action) try {\r\n\t\t\t\tthis.execute(on, message);\r\n\t\t\t\taction = (message.action == action ? \"\" : message.action);\r\n\t\t\t} catch (fault) {\r\n\t\t\t\tthis.trap(on, message, fault);\r\n\t\t\t}\r\n\t\t}"
				},
				"execute": {
					"type": "function",
					"source": "function(on, message) {\r\n\t\t\tlet method = on[message.action];\r\n\t\t\tif (typeof method == \"function\") {\r\n\t\t\t\tmethod[message.length ? \"apply\" : \"call\"](on, message);\r\n\t\t\t}\r\n\t\t}"
				},
				"trap": {
					"type": "function",
					"source": "function(on, message, fault) {\r\n\t\t\tfault.message = `Error processing action \"${message.action}\": ` + fault.message;\r\n\t\t\tfault.processing = message;\r\n\t\t\tfault.on = on;\r\n\t\t\tthrow fault;\r\n\t\t}"
				},
				"initialize": {
					"type": "function",
					"source": "function(conf) {\r\n\t\t\tif (!this.part[Symbol.iterator]) {\r\n\t\t\t\tthis.sys.define(this.part, Symbol.iterator, this.use.Part[Symbol.iterator], \"const\");\r\n\t\t\t}\r\n\t\t\tfor (let part of this.part) part.partOf = this;\r\n\t\t}"
				},
				"super": {
					"type": "function",
					"source": "function(method, ...args) {\r\n\t\t\tlet object = this;\r\n\t\t\tif (this[method]) while (object = this.sys.prototypeOf(object)) {\r\n\t\t\t\tlet fn = object[method];\r\n\t\t\t\tif (fn != this[method]) {\r\n\t\t\t\t\treturn fn ? fn.apply(this, args) : undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
				}
			}
		},
		"Processor": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Controller"
				},
				"action": {
					"type": "object",
					"constructor": "type",
					"part": {}
				},
				"execute": {
					"type": "function",
					"source": "function(on, message) {\r\n\t\t\tlet op = this.action[message.action];\r\n\t\t\top && op.call(this, on, message);\r\n\t\t}"
				}
			}
		},
		"Owner": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Controller"
				},
				"content": {
					"facet": "type",
					"type": "string",
					"source": "Control"
				},
				"receive": {
					"type": "function",
					"source": "function(message) {\r\n\t\t\tmessage = messageFor.call(this, message);\r\n\t\t\tif (message.channel == \"self\") {\r\n\t\t\t\tthis.controller.process(this, message);\r\n\t\t\t\tthis.transmit.down(this, message);\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tthis.content.controller.process(this.content, message);\r\n\t\t\t\tthis.transmit.down(this.content, message);\r\n\t\t\t}\r\n\t\t}"
				},
				"transmit": {
					"type": "object",
					"constructor": "type",
					"part": {
						"up": {
							"type": "function",
							"source": "function(on, signal) {\r\n\t\t\t\twhile (on) {\r\n\t\t\t\t\tif (!signal.action) return;\r\n\t\t\t\t\ton.receive && on.receive(signal);\r\n\t\t\t\t\ton = on.partOf;\r\n\t\t\t\t}\r\n\t\t\t}"
						},
						"down": {
							"type": "function",
							"source": "function down(on, signal) {\r\n\t\t\t\tif (on.part) for (on of on.part) {\r\n\t\t\t\t\tif (!signal.action) return;\r\n\t\t\t\t\ton.receive && on.receive(signal);\r\n\t\t\t\t\tdown(on, signal);\r\n\t\t\t\t}\r\n\t\t\t}"
						}
					}
				},
				"initialize": {
					"facet": "before",
					"type": "function",
					"source": "function(conf) {\r\n\t\t\tconf.owner = this;\r\n\t\t}"
				}
			}
		},
		"Service": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				},
				"service": {
					"type": "function",
					"source": "function(receiver, subject, request) {\r\n\t\t\tlet message = this.createMessage(receiver, subject, request);\r\n\t\t\tthis.process(receiver, message);\r\n\t\t}"
				},
				"createMessage": {
					"type": "function",
					"source": "createMessage(receiver, subject, request) {\r\n\t\t\tlet message = this.sys.extend();\r\n\t\t\tmessage.action = subject;\r\n\t\t\tmessage.request = request;\r\n\t\t\tmessage.status = 0;\r\n\t\t\treturn message;\r\n\t\t}"
				},
				"process": {
					"type": "function",
					"source": "function(receiver, message) {\r\n\t\t\tthrow new Error(\"Abstract Service Call.\");\r\n\t\t}"
				}
			}
		},
		"FileService": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Service"
				},
				"open": {
					"type": "function",
					"source": "function(pathname, receiver) {\r\n\t\t\tthis.service(receiver, \"opened\", {\r\n\t\t\t\turl: pathname,\r\n\t\t\t\tmethod: \"GET\"\r\n\t\t\t});\r\n\t\t}"
				},
				"save": {
					"type": "function",
					"source": "function(pathname, content, receiver) {\r\n\t\t\tthis.service(receiver, \"saved\", {\r\n\t\t\t\turl: pathname,\r\n\t\t\t\tcontent: content,\r\n\t\t\t\tmethod: \"PUT\"\r\n\t\t\t});\r\n\t\t}"
				}
			}
		},
		"Part": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				}
			}
		},
		"Empty": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				}
			}
		},
		"List": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				}
			}
		},
		"Record": {
			"type": "object",
			"constructor": "super",
			"part": {
				"": {
					"facet": "super",
					"type": "string",
					"source": "Object"
				}
			}
		}
	}
}