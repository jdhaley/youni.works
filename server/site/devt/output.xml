<target>
	<word>const</word>
	<word>OBJECT</word>
	<op>=</op>
	<word>Object</word>
	<pn>;</pn>
	<word>const</word>
	<word>INTERFACE</word>
	<op>=</op>
	<word>Symbol</word>
	<list>
		<string>&quot;interface&quot;</string>
	</list>
	<pn>;</pn>
	<word>const</word>
	<word>ObjectInterface</word>
	<op>=</op>
	<word>OBJECT</word>
	<op>.</op>
	<word>create</word>
	<list>
		<word>null</word>
	</list>
	<pn>;</pn>
	<word>const</word>
	<word>Declaration</word>
	<op>=</op>
	<word>OBJECT</word>
	<op>.</op>
	<word>create</word>
	<list>
		<word>ObjectInterface</word>
	</list>
	<pn>;</pn>
	<word>Declaration</word>
	<op>.</op>
	<word>define</word>
	<op>=</op>
	<fn>
		<list>
			<word>object</word>
		</list>
		<body>
			<word>return</word>
			<word>OBJECT</word>
			<op>.</op>
			<word>defineProperty</word>
			<list>
				<word>object</word>
				<pn>,</pn>
				<word>this</word>
				<op>.</op>
				<word>name</word>
				<pn>,</pn>
				<word>this</word>
			</list>
			<pn>;</pn>
		</body>
	</fn>
	<pn>;</pn>
	<word>export</word>
	<word>default</word>
	<body>
		<word>package$</word>
		<pn>:</pn>
		<string>&quot;youni.works/base/system&quot;</string>
		<pn>,</pn>
		<word>Object</word>
		<pn>:</pn>
		<word>ObjectInterface</word>
		<pn>,</pn>
		<word>Declaration</word>
		<pn>:</pn>
		<word>Declaration</word>
		<pn>,</pn>
		<word>System</word>
		<pn>:</pn>
		<body>
			<word>super$</word>
			<pn>:</pn>
			<string>&quot;Object&quot;</string>
			<pn>,</pn>
			<word>interfaceOf</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>value</word>
					<pn>,</pn>
					<word>match</word>
				</list>
				<body>
					<word>let</word>
					<word>matchType</word>
					<op>=</op>
					<word>typeof</word>
					<word>match</word>
					<pn>;</pn>
					<word>while</word>
					<list>
						<word>value</word>
					</list>
					<body>
						<word>value</word>
						<op>=</op>
						<word>value</word>
						<array>
							<word>INTERFACE</word>
						</array>
						<pn>;</pn>
						<word>switch</word>
						<list>
							<word>matchType</word>
						</list>
						<body>
							<word>case</word>
							<string>&quot;string&quot;</string>
							<pn>:</pn>
							<word>if</word>
							<list>
								<word>match</word>
								<op>==</op>
								<word>value</word>
								<array>
									<word>Symbol</word>
									<op>.</op>
									<word>toStringTag</word>
								</array>
							</list>
							<word>return</word>
							<word>value</word>
							<pn>;</pn>
							<word>break</word>
							<pn>;</pn>
							<word>case</word>
							<string>&quot;object&quot;</string>
							<pn>:</pn>
							<word>if</word>
							<list>
								<word>match</word>
								<op>==</op>
								<word>value</word>
							</list>
							<word>return</word>
							<word>value</word>
							<pn>;</pn>
							<word>break</word>
							<pn>;</pn>
							<word>case</word>
							<string>&quot;undefined&quot;</string>
							<pn>:</pn>
							<word>return</word>
							<word>value</word>
							<pn>;</pn>
							<word>default</word>
							<pn>:</pn>
							<word>throw</word>
							<word>new</word>
							<word>TypeError</word>
							<list>
								<string>&quot;Invalid match argument.&quot;</string>
							</list>
							<pn>;</pn>
						</body>
						<word>value</word>
						<op>=</op>
						<word>this</word>
						<op>.</op>
						<word>prototypeOf</word>
						<list>
							<word>value</word>
						</list>
						<pn>;</pn>
					</body>
				</body>
			</fn>
			<pn>,</pn>
			<word>prototypeOf</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>value</word>
				</list>
				<body>
					<word>if</word>
					<list>
						<word>value</word>
						<op>&amp;&amp;</op>
						<word>typeof</word>
						<word>value</word>
						<op>==</op>
						<string>&quot;object&quot;</string>
					</list>
					<word>return</word>
					<word>OBJECT</word>
					<op>.</op>
					<word>getPrototypeOf</word>
					<list>
						<word>value</word>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>isPrototypeOf</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>value</word>
				</list>
				<body>
					<word>return</word>
					<word>typeof</word>
					<word>object</word>
					<op>==</op>
					<string>&quot;object&quot;</string>
					<op>?</op>
					<word>OBJECT</word>
					<op>.</op>
					<word>isPrototypeOf</word>
					<op>.</op>
					<word>call</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<word>value</word>
					</list>
					<pn>:</pn>
					<word>false</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>isInterface</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
				</list>
				<body>
					<word>return</word>
					<word>this</word>
					<op>.</op>
					<word>hasOwn</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<word>INTERFACE</word>
					</list>
					<op>||</op>
					<word>object</word>
					<op>===</op>
					<word>null</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>isDeclaration</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>value</word>
				</list>
				<body>
					<word>return</word>
					<word>this</word>
					<op>.</op>
					<word>isPrototypeOf</word>
					<list>
						<word>Declaration</word>
						<pn>,</pn>
						<word>value</word>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>isPublic</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>key</word>
				</list>
				<body>
					<word>for</word>
					<list>
						<pn>;</pn>
						<word>object</word>
						<pn>;</pn>
						<word>object</word>
						<op>=</op>
						<word>this</word>
						<op>.</op>
						<word>prototypeOf</word>
						<list>
							<word>object</word>
						</list>
					</list>
					<body>
						<word>let</word>
						<word>descriptor</word>
						<op>=</op>
						<word>Reflect</word>
						<op>.</op>
						<word>getOwnPropertyDescriptor</word>
						<list>
							<word>object</word>
							<pn>,</pn>
							<word>key</word>
						</list>
						<pn>;</pn>
						<word>if</word>
						<list>
							<word>descriptor</word>
						</list>
						<word>return</word>
						<word>descriptor</word>
						<op>.</op>
						<word>enumerable</word>
						<op>?</op>
						<word>true</word>
						<pn>:</pn>
						<word>false</word>
						<pn>;</pn>
					</body>
					<word>return</word>
					<word>undefined</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>describe</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>key</word>
				</list>
				<body>
					<word>while</word>
					<list>
						<word>object</word>
					</list>
					<body>
						<word>let</word>
						<word>descriptor</word>
						<op>=</op>
						<word>Reflect</word>
						<op>.</op>
						<word>getOwnPropertyDescriptor</word>
						<list>
							<word>object</word>
							<pn>,</pn>
							<word>key</word>
						</list>
						<pn>;</pn>
						<word>if</word>
						<list>
							<word>descriptor</word>
						</list>
						<body>
							<word>descriptor</word>
							<op>.</op>
							<word>name</word>
							<op>=</op>
							<word>key</word>
							<pn>;</pn>
							<word>descriptor</word>
							<op>.</op>
							<word>definedOn</word>
							<op>=</op>
							<word>object</word>
							<pn>;</pn>
							<word>return</word>
							<word>this</word>
							<op>.</op>
							<word>extend</word>
							<list>
								<word>Declaration</word>
								<pn>,</pn>
								<word>descriptor</word>
							</list>
							<pn>;</pn>
						</body>
						<word>object</word>
						<op>=</op>
						<word>this</word>
						<op>.</op>
						<word>prototypeOf</word>
						<list>
							<word>object</word>
						</list>
						<pn>;</pn>
					</body>
					<word>return</word>
					<word>Declaration</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>hasOwn</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>key</word>
				</list>
				<body>
					<word>return</word>
					<word>object</word>
					<op>&amp;&amp;</op>
					<word>typeof</word>
					<word>object</word>
					<op>==</op>
					<string>&quot;object&quot;</string>
					<op>&amp;&amp;</op>
					<word>OBJECT</word>
					<op>.</op>
					<word>hasOwnProperty</word>
					<op>.</op>
					<word>call</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<word>key</word>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>extend</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>declarations</word>
				</list>
				<body>
					<word>if</word>
					<list>
						<op>!</op>
						<word>arguments</word>
						<op>.</op>
						<word>length</word>
					</list>
					<word>object</word>
					<op>=</op>
					<word>null</word>
					<pn>;</pn>
					<word>return</word>
					<word>this</word>
					<op>.</op>
					<word>implement</word>
					<list>
						<word>OBJECT</word>
						<op>.</op>
						<word>create</word>
						<list>
							<word>object</word>
						</list>
						<pn>,</pn>
						<word>declarations</word>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>implement</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>declarations</word>
				</list>
				<body>
					<word>for</word>
					<list>
						<word>let</word>
						<word>name</word>
						<word>in</word>
						<word>declarations</word>
					</list>
					<body>
						<word>this</word>
						<op>.</op>
						<word>define</word>
						<list>
							<word>object</word>
							<pn>,</pn>
							<word>name</word>
							<pn>,</pn>
							<word>declarations</word>
							<array>
								<word>name</word>
							</array>
						</list>
						<pn>;</pn>
					</body>
					<word>return</word>
					<word>object</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>define</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>name</word>
					<pn>,</pn>
					<word>decl</word>
				</list>
				<body>
					<word>if</word>
					<list>
						<op>!</op>
						<word>this</word>
						<op>.</op>
						<word>isDeclaration</word>
						<list>
							<word>decl</word>
						</list>
					</list>
					<body>
						<word>decl</word>
						<op>=</op>
						<word>this</word>
						<op>.</op>
						<word>declare</word>
						<list>
							<word>decl</word>
							<pn>,</pn>
							<word>name</word>
						</list>
						<pn>;</pn>
						<word>decl</word>
						<op>.</op>
						<word>enumerable</word>
						<op>=</op>
						<word>true</word>
						<pn>;</pn>
						<word>decl</word>
						<op>.</op>
						<word>writable</word>
						<op>=</op>
						<word>true</word>
						<pn>;</pn>
						<word>decl</word>
						<op>.</op>
						<word>value</word>
						<op>=</op>
						<word>decl</word>
						<op>.</op>
						<word>source</word>
						<pn>;</pn>
					</body>
					<word>try</word>
					<body>
						<word>decl</word>
						<op>.</op>
						<word>define</word>
						<list>
							<word>object</word>
						</list>
						<pn>;</pn>
					</body>
					<word>catch</word>
					<list>
						<word>error</word>
					</list>
					<body>
						<word>this</word>
						<op>.</op>
						<word>error</word>
						<list>
							<word>error</word>
						</list>
						<pn>;</pn>
					</body>
					<word>return</word>
					<word>decl</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>defineInterface</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>object</word>
					<pn>,</pn>
					<word>name</word>
				</list>
				<body>
					<word>if</word>
					<list>
						<op>!</op>
						<word>object</word>
						<op>.</op>
						<word>sys</word>
					</list>
					<word>OBJECT</word>
					<op>.</op>
					<word>defineProperty</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<string>&quot;sys&quot;</string>
						<pn>,</pn>
						<body>
							<word>value</word>
							<pn>:</pn>
							<word>this</word>
						</body>
					</list>
					<pn>;</pn>
					<word>if</word>
					<list>
						<word>name</word>
					</list>
					<word>OBJECT</word>
					<op>.</op>
					<word>defineProperty</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<word>Symbol</word>
						<op>.</op>
						<word>toStringTag</word>
						<pn>,</pn>
						<body>
							<word>value</word>
							<pn>:</pn>
							<word>name</word>
						</body>
					</list>
					<pn>;</pn>
					<word>if</word>
					<list>
						<word>this</word>
						<op>.</op>
						<word>isInterface</word>
						<list>
							<word>this</word>
							<op>.</op>
							<word>prototypeOf</word>
							<list>
								<word>object</word>
							</list>
						</list>
					</list>
					<body>
						<word>OBJECT</word>
						<op>.</op>
						<word>defineProperty</word>
						<list>
							<word>object</word>
							<pn>,</pn>
							<word>INTERFACE</word>
							<pn>,</pn>
							<body>
								<word>value</word>
								<pn>:</pn>
								<word>object</word>
							</body>
						</list>
						<pn>;</pn>
					</body>
				</body>
			</fn>
			<pn>,</pn>
			<word>declare</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>source</word>
					<pn>,</pn>
					<word>name</word>
					<pn>,</pn>
					<word>facet</word>
				</list>
				<body>
					<word>let</word>
					<word>prop</word>
					<op>=</op>
					<word>this</word>
					<op>.</op>
					<word>extend</word>
					<list>
						<word>Declaration</word>
					</list>
					<pn>;</pn>
					<word>if</word>
					<list>
						<word>name</word>
					</list>
					<word>prop</word>
					<op>.</op>
					<word>name</word>
					<op>=</op>
					<word>name</word>
					<pn>;</pn>
					<word>if</word>
					<list>
						<word>facet</word>
					</list>
					<word>prop</word>
					<op>.</op>
					<word>facet</word>
					<op>=</op>
					<word>facet</word>
					<pn>;</pn>
					<word>prop</word>
					<op>.</op>
					<word>source</word>
					<op>=</op>
					<word>source</word>
					<pn>;</pn>
					<word>return</word>
					<word>prop</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>error</word>
			<pn>:</pn>
			<fn>
				<list>
					<word>error</word>
				</list>
				<body>
					<word>throw</word>
					<word>error</word>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<word>packages</word>
			<pn>:</pn>
			<body></body>
		</body>
	</body>
</target>