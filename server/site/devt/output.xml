<target>
	<id>const</id>
	<id>OBJECT</id>
	<op>=</op>
	<id>Object</id>
	<pn>;</pn>
	<id>const</id>
	<id>INTERFACE</id>
	<op>=</op>
	<id>Symbol</id>
	<list>
		<string>&quot;interface&quot;</string>
	</list>
	<pn>;</pn>
	<id>const</id>
	<id>ObjectInterface</id>
	<op>=</op>
	<target>
		<id>const</id>
		<id>OBJECT</id>
		<op>=</op>
		<id>Object</id>
		<pn>;</pn>
		<id>const</id>
		<id>INTERFACE</id>
		<op>=</op>
		<id>Symbol</id>
		<list>
			<string>&quot;interface&quot;</string>
		</list>
		<pn>;</pn>
		<id>const</id>
		<id>ObjectInterface</id>
		<op>=</op>
		<id>OBJECT.create</id>
		<list>
			<id>null</id>
		</list>
		<pn>;</pn>
		<id>const</id>
		<id>Declaration</id>
		<op>=</op>
		<id>OBJECT.create</id>
		<list>
			<id>ObjectInterface</id>
		</list>
		<pn>;</pn>
		<id>Declaration.define</id>
		<op>=</op>
		<fn>
			<list>
				<id>object</id>
			</list>
			<body>
				<id>return</id>
				<id>OBJECT.defineProperty</id>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>this.name</id>
					<pn>,</pn>
					<id>this</id>
				</list>
				<pn>;</pn>
			</body>
		</fn>
		<pn>;</pn>
		<id>export</id>
		<object>
			<id>default</id>
			<body>
				<id>package$</id>
				<pn>:</pn>
				<string>&quot;youni.works/base/system&quot;</string>
				<pn>,</pn>
				<id>Object</id>
				<pn>:</pn>
				<id>ObjectInterface</id>
				<pn>,</pn>
				<id>Declaration</id>
				<pn>:</pn>
				<id>Declaration</id>
				<pn>,</pn>
				<id>System</id>
				<pn>:</pn>
				<id>Object</id>
				<body>
					<id>interfaceOf</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>value</id>
						<pn>,</pn>
						<id>match</id>
					</list>
					<body>
						<id>let</id>
						<id>matchType</id>
						<op>=</op>
						<id>typeof</id>
						<id>match</id>
						<pn>;</pn>
						<id>while</id>
						<list>
							<id>value</id>
						</list>
						<body>
							<id>value</id>
							<op>=</op>
							<id>value</id>
							<array>
								<id>INTERFACE</id>
							</array>
							<pn>;</pn>
							<id>switch</id>
							<list>
								<id>matchType</id>
							</list>
							<body>
								<id>case</id>
								<string>&quot;string&quot;</string>
								<pn>:</pn>
								<id>if</id>
								<list>
									<id>match</id>
									<op>==</op>
									<id>value</id>
									<array>
										<id>Symbol.toStringTag</id>
									</array>
								</list>
								<id>return</id>
								<id>value</id>
								<pn>;</pn>
								<id>break</id>
								<pn>;</pn>
								<id>case</id>
								<string>&quot;object&quot;</string>
								<pn>:</pn>
								<id>if</id>
								<list>
									<id>match</id>
									<op>==</op>
									<id>value</id>
								</list>
								<id>return</id>
								<id>value</id>
								<pn>;</pn>
								<id>break</id>
								<pn>;</pn>
								<id>case</id>
								<string>&quot;undefined&quot;</string>
								<pn>:</pn>
								<id>return</id>
								<id>value</id>
								<pn>;</pn>
								<id>default</id>
								<pn>:</pn>
								<id>throw</id>
								<id>new</id>
								<id>TypeError</id>
								<list>
									<string>&quot;Invalid match argument.&quot;</string>
								</list>
								<pn>;</pn>
							</body>
							<id>value</id>
							<op>=</op>
							<id>this.prototypeOf</id>
							<list>
								<id>value</id>
							</list>
							<pn>;</pn>
						</body>
					</body>
					<pn>,</pn>
					<id>prototypeOf</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>value</id>
					</list>
					<body>
						<id>if</id>
						<list>
							<id>value</id>
							<op>&amp;&amp;</op>
							<id>typeof</id>
							<id>value</id>
							<op>==</op>
							<string>&quot;object&quot;</string>
						</list>
						<id>return</id>
						<id>OBJECT.getPrototypeOf</id>
						<list>
							<id>value</id>
						</list>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>isPrototypeOf</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>value</id>
					</list>
					<body>
						<id>return</id>
						<id>typeof</id>
						<id>object</id>
						<op>==</op>
						<string>&quot;object&quot;</string>
						<op>?</op>
						<id>OBJECT.isPrototypeOf.call</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>value</id>
						</list>
						<pn>:</pn>
						<id>false</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>isInterface</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
					</list>
					<body>
						<id>return</id>
						<id>this.hasOwn</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>INTERFACE</id>
						</list>
						<op>||</op>
						<id>object</id>
						<op>===</op>
						<id>null</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>isDeclaration</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>value</id>
					</list>
					<body>
						<id>return</id>
						<id>this.isPrototypeOf</id>
						<list>
							<id>Declaration</id>
							<pn>,</pn>
							<id>value</id>
						</list>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>isPublic</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>key</id>
					</list>
					<body>
						<id>for</id>
						<list>
							<pn>;</pn>
							<id>object</id>
							<pn>;</pn>
							<id>object</id>
							<op>=</op>
							<id>this.prototypeOf</id>
							<list>
								<id>object</id>
							</list>
						</list>
						<body>
							<id>let</id>
							<id>descriptor</id>
							<op>=</op>
							<id>Reflect.getOwnPropertyDescriptor</id>
							<list>
								<id>object</id>
								<pn>,</pn>
								<id>key</id>
							</list>
							<pn>;</pn>
							<id>if</id>
							<list>
								<id>descriptor</id>
							</list>
							<id>return</id>
							<id>descriptor.enumerable</id>
							<op>?</op>
							<id>true</id>
							<pn>:</pn>
							<id>false</id>
							<pn>;</pn>
						</body>
						<id>return</id>
						<id>undefined</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>describe</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>key</id>
					</list>
					<body>
						<id>while</id>
						<list>
							<id>object</id>
						</list>
						<body>
							<id>let</id>
							<id>descriptor</id>
							<op>=</op>
							<id>Reflect.getOwnPropertyDescriptor</id>
							<list>
								<id>object</id>
								<pn>,</pn>
								<id>key</id>
							</list>
							<pn>;</pn>
							<id>if</id>
							<list>
								<id>descriptor</id>
							</list>
							<body>
								<id>descriptor.name</id>
								<op>=</op>
								<id>key</id>
								<pn>;</pn>
								<id>descriptor.definedOn</id>
								<op>=</op>
								<id>object</id>
								<pn>;</pn>
								<id>return</id>
								<id>this.extend</id>
								<list>
									<id>Declaration</id>
									<pn>,</pn>
									<id>descriptor</id>
								</list>
								<pn>;</pn>
							</body>
							<id>object</id>
							<op>=</op>
							<id>this.prototypeOf</id>
							<list>
								<id>object</id>
							</list>
							<pn>;</pn>
						</body>
						<id>return</id>
						<id>Declaration</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>hasOwn</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>key</id>
					</list>
					<body>
						<id>return</id>
						<id>object</id>
						<op>&amp;&amp;</op>
						<id>typeof</id>
						<id>object</id>
						<op>==</op>
						<string>&quot;object&quot;</string>
						<op>&amp;&amp;</op>
						<id>OBJECT.hasOwnProperty.call</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>key</id>
						</list>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>extend</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>declarations</id>
					</list>
					<body>
						<id>if</id>
						<list>
							<op>!</op>
							<id>arguments.length</id>
						</list>
						<id>object</id>
						<op>=</op>
						<id>null</id>
						<pn>;</pn>
						<id>return</id>
						<id>this.implement</id>
						<list>
							<id>OBJECT.create</id>
							<list>
								<id>object</id>
							</list>
							<pn>,</pn>
							<id>declarations</id>
						</list>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>implement</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>declarations</id>
					</list>
					<body>
						<id>for</id>
						<list>
							<id>let</id>
							<id>name</id>
							<id>in</id>
							<id>declarations</id>
						</list>
						<body>
							<id>this.define</id>
							<list>
								<id>object</id>
								<pn>,</pn>
								<id>name</id>
								<pn>,</pn>
								<id>declarations</id>
								<array>
									<id>name</id>
								</array>
							</list>
							<pn>;</pn>
						</body>
						<id>return</id>
						<id>object</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>define</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>name</id>
						<pn>,</pn>
						<id>decl</id>
					</list>
					<body>
						<id>if</id>
						<list>
							<op>!</op>
							<id>this.isDeclaration</id>
							<list>
								<id>decl</id>
							</list>
						</list>
						<body>
							<id>decl</id>
							<op>=</op>
							<id>this.declare</id>
							<list>
								<id>decl</id>
								<pn>,</pn>
								<id>name</id>
							</list>
							<pn>;</pn>
							<id>decl.enumerable</id>
							<op>=</op>
							<id>true</id>
							<pn>;</pn>
							<id>decl.writable</id>
							<op>=</op>
							<id>true</id>
							<pn>;</pn>
							<id>decl.value</id>
							<op>=</op>
							<id>decl.source</id>
							<pn>;</pn>
						</body>
						<id>try</id>
						<body>
							<id>decl.define</id>
							<list>
								<id>object</id>
							</list>
							<pn>;</pn>
						</body>
						<id>catch</id>
						<list>
							<id>error</id>
						</list>
						<body>
							<id>this.error</id>
							<list>
								<id>error</id>
							</list>
							<pn>;</pn>
						</body>
						<id>return</id>
						<id>decl</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>defineInterface</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>name</id>
					</list>
					<body>
						<id>if</id>
						<list>
							<op>!</op>
							<id>object.sys</id>
						</list>
						<id>OBJECT.defineProperty</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<string>&quot;sys&quot;</string>
							<pn>,</pn>
							<body>
								<id>value</id>
								<pn>:</pn>
								<id>this</id>
							</body>
						</list>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>name</id>
						</list>
						<id>OBJECT.defineProperty</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>Symbol.toStringTag</id>
							<pn>,</pn>
							<body>
								<id>value</id>
								<pn>:</pn>
								<id>name</id>
							</body>
						</list>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>this.isInterface</id>
							<list>
								<id>this.prototypeOf</id>
								<list>
									<id>object</id>
								</list>
							</list>
						</list>
						<body>
							<id>OBJECT.defineProperty</id>
							<list>
								<id>object</id>
								<pn>,</pn>
								<id>INTERFACE</id>
								<pn>,</pn>
								<body>
									<id>value</id>
									<pn>:</pn>
									<id>object</id>
								</body>
							</list>
							<pn>;</pn>
						</body>
					</body>
					<pn>,</pn>
					<id>declare</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>source</id>
						<pn>,</pn>
						<id>name</id>
						<pn>,</pn>
						<id>facet</id>
					</list>
					<body>
						<id>let</id>
						<id>prop</id>
						<op>=</op>
						<id>this.extend</id>
						<list>
							<id>Declaration</id>
						</list>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>name</id>
						</list>
						<id>prop.name</id>
						<op>=</op>
						<id>name</id>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>facet</id>
						</list>
						<id>prop.facet</id>
						<op>=</op>
						<id>facet</id>
						<pn>;</pn>
						<id>prop.source</id>
						<op>=</op>
						<id>source</id>
						<pn>;</pn>
						<id>return</id>
						<id>prop</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>error</id>
					<pn>:</pn>
					<id>function</id>
					<list>
						<id>error</id>
					</list>
					<body>
						<id>throw</id>
						<id>error</id>
						<pn>;</pn>
					</body>
					<pn>,</pn>
					<id>packages</id>
					<pn>:</pn>
					<body></body>
				</body>
			</body>
		</object>
	</target>
	<id>OBJECT.create</id>
	<list>
		<id>null</id>
	</list>
	<pn>;</pn>
	<id>const</id>
	<id>Declaration</id>
	<op>=</op>
	<id>OBJECT.create</id>
	<list>
		<id>ObjectInterface</id>
	</list>
	<pn>;</pn>
	<id>Declaration.define</id>
	<op>=</op>
	<fn>
		<list>
			<id>object</id>
		</list>
		<body>
			<id>return</id>
			<id>OBJECT.defineProperty</id>
			<list>
				<id>object</id>
				<pn>,</pn>
				<id>this.name</id>
				<pn>,</pn>
				<id>this</id>
			</list>
			<pn>;</pn>
		</body>
	</fn>
	<pn>;</pn>
	<id>export</id>
	<id>default</id>
	<body>
		<id>package$</id>
		<pn>:</pn>
		<string>&quot;youni.works/base/system&quot;</string>
		<pn>,</pn>
		<id>Object</id>
		<pn>:</pn>
		<id>ObjectInterface</id>
		<pn>,</pn>
		<id>Declaration</id>
		<pn>:</pn>
		<id>Declaration</id>
		<pn>,</pn>
		<id>System</id>
		<pn>:</pn>
		<body>
			<id>super$</id>
			<pn>:</pn>
			<string>&quot;Object&quot;</string>
			<pn>,</pn>
			<id>interfaceOf</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>value</id>
					<pn>,</pn>
					<id>match</id>
				</list>
				<body>
					<id>let</id>
					<id>matchType</id>
					<op>=</op>
					<id>typeof</id>
					<id>match</id>
					<pn>;</pn>
					<id>while</id>
					<list>
						<id>value</id>
					</list>
					<body>
						<id>value</id>
						<op>=</op>
						<id>value</id>
						<array>
							<id>INTERFACE</id>
						</array>
						<pn>;</pn>
						<id>switch</id>
						<list>
							<id>matchType</id>
						</list>
						<body>
							<id>case</id>
							<string>&quot;string&quot;</string>
							<pn>:</pn>
							<id>if</id>
							<list>
								<id>match</id>
								<op>==</op>
								<id>value</id>
								<array>
									<id>Symbol.toStringTag</id>
								</array>
							</list>
							<id>return</id>
							<id>value</id>
							<pn>;</pn>
							<id>break</id>
							<pn>;</pn>
							<id>case</id>
							<string>&quot;object&quot;</string>
							<pn>:</pn>
							<id>if</id>
							<list>
								<id>match</id>
								<op>==</op>
								<id>value</id>
							</list>
							<id>return</id>
							<id>value</id>
							<pn>;</pn>
							<id>break</id>
							<pn>;</pn>
							<id>case</id>
							<string>&quot;undefined&quot;</string>
							<pn>:</pn>
							<id>return</id>
							<id>value</id>
							<pn>;</pn>
							<id>default</id>
							<pn>:</pn>
							<id>throw</id>
							<id>new</id>
							<id>TypeError</id>
							<list>
								<string>&quot;Invalid match argument.&quot;</string>
							</list>
							<pn>;</pn>
						</body>
						<id>value</id>
						<op>=</op>
						<id>this.prototypeOf</id>
						<list>
							<id>value</id>
						</list>
						<pn>;</pn>
					</body>
				</body>
			</fn>
			<pn>,</pn>
			<id>prototypeOf</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>value</id>
				</list>
				<body>
					<id>if</id>
					<list>
						<id>value</id>
						<op>&amp;&amp;</op>
						<id>typeof</id>
						<id>value</id>
						<op>==</op>
						<string>&quot;object&quot;</string>
					</list>
					<id>return</id>
					<id>OBJECT.getPrototypeOf</id>
					<list>
						<id>value</id>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>isPrototypeOf</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>value</id>
				</list>
				<body>
					<id>return</id>
					<id>typeof</id>
					<id>object</id>
					<op>==</op>
					<string>&quot;object&quot;</string>
					<op>?</op>
					<id>OBJECT.isPrototypeOf.call</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>value</id>
					</list>
					<pn>:</pn>
					<id>false</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>isInterface</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
				</list>
				<body>
					<id>return</id>
					<id>this.hasOwn</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>INTERFACE</id>
					</list>
					<op>||</op>
					<id>object</id>
					<op>===</op>
					<id>null</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>isDeclaration</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>value</id>
				</list>
				<body>
					<id>return</id>
					<id>this.isPrototypeOf</id>
					<list>
						<id>Declaration</id>
						<pn>,</pn>
						<id>value</id>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>isPublic</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>key</id>
				</list>
				<body>
					<id>for</id>
					<list>
						<pn>;</pn>
						<id>object</id>
						<pn>;</pn>
						<id>object</id>
						<op>=</op>
						<id>this.prototypeOf</id>
						<list>
							<id>object</id>
						</list>
					</list>
					<body>
						<id>let</id>
						<id>descriptor</id>
						<op>=</op>
						<id>Reflect.getOwnPropertyDescriptor</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>key</id>
						</list>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>descriptor</id>
						</list>
						<id>return</id>
						<id>descriptor.enumerable</id>
						<op>?</op>
						<id>true</id>
						<pn>:</pn>
						<id>false</id>
						<pn>;</pn>
					</body>
					<id>return</id>
					<id>undefined</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>describe</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>key</id>
				</list>
				<body>
					<id>while</id>
					<list>
						<id>object</id>
					</list>
					<body>
						<id>let</id>
						<id>descriptor</id>
						<op>=</op>
						<id>Reflect.getOwnPropertyDescriptor</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>key</id>
						</list>
						<pn>;</pn>
						<id>if</id>
						<list>
							<id>descriptor</id>
						</list>
						<body>
							<id>descriptor.name</id>
							<op>=</op>
							<id>key</id>
							<pn>;</pn>
							<id>descriptor.definedOn</id>
							<op>=</op>
							<id>object</id>
							<pn>;</pn>
							<id>return</id>
							<id>this.extend</id>
							<list>
								<id>Declaration</id>
								<pn>,</pn>
								<id>descriptor</id>
							</list>
							<pn>;</pn>
						</body>
						<id>object</id>
						<op>=</op>
						<id>this.prototypeOf</id>
						<list>
							<id>object</id>
						</list>
						<pn>;</pn>
					</body>
					<id>return</id>
					<id>Declaration</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>hasOwn</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>key</id>
				</list>
				<body>
					<id>return</id>
					<id>object</id>
					<op>&amp;&amp;</op>
					<id>typeof</id>
					<id>object</id>
					<op>==</op>
					<string>&quot;object&quot;</string>
					<op>&amp;&amp;</op>
					<id>OBJECT.hasOwnProperty.call</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>key</id>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>extend</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>declarations</id>
				</list>
				<body>
					<id>if</id>
					<list>
						<op>!</op>
						<id>arguments.length</id>
					</list>
					<id>object</id>
					<op>=</op>
					<id>null</id>
					<pn>;</pn>
					<id>return</id>
					<id>this.implement</id>
					<list>
						<id>OBJECT.create</id>
						<list>
							<id>object</id>
						</list>
						<pn>,</pn>
						<id>declarations</id>
					</list>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>implement</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>declarations</id>
				</list>
				<body>
					<id>for</id>
					<list>
						<id>let</id>
						<id>name</id>
						<id>in</id>
						<id>declarations</id>
					</list>
					<body>
						<id>this.define</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>name</id>
							<pn>,</pn>
							<id>declarations</id>
							<array>
								<id>name</id>
							</array>
						</list>
						<pn>;</pn>
					</body>
					<id>return</id>
					<id>object</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>define</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>name</id>
					<pn>,</pn>
					<id>decl</id>
				</list>
				<body>
					<id>if</id>
					<list>
						<op>!</op>
						<id>this.isDeclaration</id>
						<list>
							<id>decl</id>
						</list>
					</list>
					<body>
						<id>decl</id>
						<op>=</op>
						<id>this.declare</id>
						<list>
							<id>decl</id>
							<pn>,</pn>
							<id>name</id>
						</list>
						<pn>;</pn>
						<id>decl.enumerable</id>
						<op>=</op>
						<id>true</id>
						<pn>;</pn>
						<id>decl.writable</id>
						<op>=</op>
						<id>true</id>
						<pn>;</pn>
						<id>decl.value</id>
						<op>=</op>
						<id>decl.source</id>
						<pn>;</pn>
					</body>
					<id>try</id>
					<body>
						<id>decl.define</id>
						<list>
							<id>object</id>
						</list>
						<pn>;</pn>
					</body>
					<id>catch</id>
					<list>
						<id>error</id>
					</list>
					<body>
						<id>this.error</id>
						<list>
							<id>error</id>
						</list>
						<pn>;</pn>
					</body>
					<id>return</id>
					<id>decl</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>defineInterface</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>object</id>
					<pn>,</pn>
					<id>name</id>
				</list>
				<body>
					<id>if</id>
					<list>
						<op>!</op>
						<id>object.sys</id>
					</list>
					<id>OBJECT.defineProperty</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<string>&quot;sys&quot;</string>
						<pn>,</pn>
						<body>
							<id>value</id>
							<pn>:</pn>
							<id>this</id>
						</body>
					</list>
					<pn>;</pn>
					<id>if</id>
					<list>
						<id>name</id>
					</list>
					<id>OBJECT.defineProperty</id>
					<list>
						<id>object</id>
						<pn>,</pn>
						<id>Symbol.toStringTag</id>
						<pn>,</pn>
						<body>
							<id>value</id>
							<pn>:</pn>
							<id>name</id>
						</body>
					</list>
					<pn>;</pn>
					<id>if</id>
					<list>
						<id>this.isInterface</id>
						<list>
							<id>this.prototypeOf</id>
							<list>
								<id>object</id>
							</list>
						</list>
					</list>
					<body>
						<id>OBJECT.defineProperty</id>
						<list>
							<id>object</id>
							<pn>,</pn>
							<id>INTERFACE</id>
							<pn>,</pn>
							<body>
								<id>value</id>
								<pn>:</pn>
								<id>object</id>
							</body>
						</list>
						<pn>;</pn>
					</body>
				</body>
			</fn>
			<pn>,</pn>
			<id>declare</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>source</id>
					<pn>,</pn>
					<id>name</id>
					<pn>,</pn>
					<id>facet</id>
				</list>
				<body>
					<id>let</id>
					<id>prop</id>
					<op>=</op>
					<id>this.extend</id>
					<list>
						<id>Declaration</id>
					</list>
					<pn>;</pn>
					<id>if</id>
					<list>
						<id>name</id>
					</list>
					<id>prop.name</id>
					<op>=</op>
					<id>name</id>
					<pn>;</pn>
					<id>if</id>
					<list>
						<id>facet</id>
					</list>
					<id>prop.facet</id>
					<op>=</op>
					<id>facet</id>
					<pn>;</pn>
					<id>prop.source</id>
					<op>=</op>
					<id>source</id>
					<pn>;</pn>
					<id>return</id>
					<id>prop</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>error</id>
			<pn>:</pn>
			<fn>
				<list>
					<id>error</id>
				</list>
				<body>
					<id>throw</id>
					<id>error</id>
					<pn>;</pn>
				</body>
			</fn>
			<pn>,</pn>
			<id>packages</id>
			<pn>:</pn>
			<body></body>
		</body>
	</body>
</target>