<target>
	<expr>
		<word>const</word>
		<word>OBJECT</word>
		<op>=</op>
		<word>Object</word>
	</expr>
	<pn>;</pn>
	<expr>
		<word>const</word>
		<word>INTERFACE</word>
		<op>=</op>
		<word>Symbol</word>
		<list>
			<string>&quot;interface&quot;</string>
		</list>
	</expr>
	<pn>;</pn>
	<expr>
		<word>const</word>
		<word>ObjectInterface</word>
		<op>=</op>
		<word>OBJECT</word>
		<op>.</op>
		<word>create</word>
		<list>
			<word>null</word>
		</list>
	</expr>
	<pn>;</pn>
	<expr>
		<word>const</word>
		<word>Declaration</word>
		<op>=</op>
		<word>OBJECT</word>
		<op>.</op>
		<word>create</word>
		<list>
			<word>ObjectInterface</word>
		</list>
	</expr>
	<pn>;</pn>
	<expr>
		<word>Declaration</word>
		<op>.</op>
		<word>define</word>
		<op>=</op>
		<fn>
			<list>
				<word>object</word>
			</list>
			<body>
				<expr>
					<word>return</word>
					<word>OBJECT</word>
					<op>.</op>
					<word>defineProperty</word>
					<list>
						<word>object</word>
						<pn>,</pn>
						<expr>
							<word>this</word>
							<op>.</op>
							<word>name</word>
						</expr>
						<pn>,</pn>
						<word>this</word>
					</list>
				</expr>
				<pn>;</pn>
			</body>
		</fn>
	</expr>
	<pn>;</pn>
	<expr>
		<word>export</word>
		<word>default</word>
		<body>
			<pair>
				<word>package$</word>
				<string>&quot;youni.works/base/system&quot;</string>
			</pair>
			<pn>,</pn>
			<pair>
				<word>Object</word>
				<word>ObjectInterface</word>
			</pair>
			<pn>,</pn>
			<pair>
				<word>Declaration</word>
				<word>Declaration</word>
			</pair>
			<pn>,</pn>
			<pair>
				<word>System</word>
				<body>
					<pair>
						<word>super$</word>
						<string>&quot;Object&quot;</string>
					</pair>
					<pn>,</pn>
					<pair>
						<word>interfaceOf</word>
						<fn>
							<list>
								<word>value</word>
								<pn>,</pn>
								<word>match</word>
							</list>
							<body>
								<expr>
									<word>let</word>
									<word>matchType</word>
									<op>=</op>
									<word>typeof</word>
									<word>match</word>
								</expr>
								<pn>;</pn>
								<fn>
									<word>while</word>
									<list>
										<word>value</word>
									</list>
									<body>
										<expr>
											<word>value</word>
											<op>=</op>
											<word>value</word>
											<array>
												<word>INTERFACE</word>
											</array>
										</expr>
										<pn>;</pn>
										<expr>
											<fn>
												<word>switch</word>
												<list>
													<word>matchType</word>
												</list>
												<body>
													<pair>
														<expr>
															<word>case</word>
															<string>&quot;string&quot;</string>
														</expr>
														<expr>
															<word>if</word>
															<list>
																<expr>
																	<word>match</word>
																	<op>==</op>
																	<word>value</word>
																	<array>
																		<expr>
																			<word>Symbol</word>
																			<op>.</op>
																			<word>toStringTag</word>
																		</expr>
																	</array>
																</expr>
															</list>
															<word>return</word>
															<word>value</word>
														</expr>
													</pair>
													<pn>;</pn>
													<word>break</word>
													<pn>;</pn>
													<pair>
														<expr>
															<word>case</word>
															<string>&quot;object&quot;</string>
														</expr>
														<expr>
															<word>if</word>
															<list>
																<expr>
																	<word>match</word>
																	<op>==</op>
																	<word>value</word>
																</expr>
															</list>
															<word>return</word>
															<word>value</word>
														</expr>
													</pair>
													<pn>;</pn>
													<word>break</word>
													<pn>;</pn>
													<pair>
														<expr>
															<word>case</word>
															<string>&quot;undefined&quot;</string>
														</expr>
														<expr>
															<word>return</word>
															<word>value</word>
														</expr>
													</pair>
													<pn>;</pn>
													<pair>
														<word>default</word>
														<expr>
															<word>throw</word>
															<word>new</word>
															<word>TypeError</word>
															<list>
																<string>&quot;Invalid match argument.&quot;</string>
															</list>
														</expr>
													</pair>
													<pn>;</pn>
												</body>
											</fn>
											<word>value</word>
											<op>=</op>
											<word>this</word>
											<op>.</op>
											<word>prototypeOf</word>
											<list>
												<word>value</word>
											</list>
										</expr>
										<pn>;</pn>
									</body>
								</fn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>prototypeOf</word>
						<fn>
							<list>
								<word>value</word>
							</list>
							<body>
								<expr>
									<word>if</word>
									<list>
										<expr>
											<word>value</word>
											<op>&amp;&amp;</op>
											<word>typeof</word>
											<word>value</word>
											<op>==</op>
											<string>&quot;object&quot;</string>
										</expr>
									</list>
									<word>return</word>
									<word>OBJECT</word>
									<op>.</op>
									<word>getPrototypeOf</word>
									<list>
										<word>value</word>
									</list>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>isPrototypeOf</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>value</word>
							</list>
							<body>
								<pair>
									<expr>
										<word>return</word>
										<word>typeof</word>
										<word>object</word>
										<op>==</op>
										<string>&quot;object&quot;</string>
										<op>?</op>
										<word>OBJECT</word>
										<op>.</op>
										<word>isPrototypeOf</word>
										<op>.</op>
										<word>call</word>
										<list>
											<word>object</word>
											<pn>,</pn>
											<word>value</word>
										</list>
									</expr>
									<word>false</word>
								</pair>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>isInterface</word>
						<fn>
							<list>
								<word>object</word>
							</list>
							<body>
								<expr>
									<word>return</word>
									<word>this</word>
									<op>.</op>
									<word>hasOwn</word>
									<list>
										<word>object</word>
										<pn>,</pn>
										<word>INTERFACE</word>
									</list>
									<op>||</op>
									<word>object</word>
									<op>===</op>
									<word>null</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>isDeclaration</word>
						<fn>
							<list>
								<word>value</word>
							</list>
							<body>
								<expr>
									<word>return</word>
									<word>this</word>
									<op>.</op>
									<word>isPrototypeOf</word>
									<list>
										<word>Declaration</word>
										<pn>,</pn>
										<word>value</word>
									</list>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>isPublic</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>key</word>
							</list>
							<body>
								<expr>
									<fn>
										<word>for</word>
										<list>
											<pn>;</pn>
											<word>object</word>
											<pn>;</pn>
											<expr>
												<word>object</word>
												<op>=</op>
												<word>this</word>
												<op>.</op>
												<word>prototypeOf</word>
												<list>
													<word>object</word>
												</list>
											</expr>
										</list>
										<body>
											<expr>
												<word>let</word>
												<word>descriptor</word>
												<op>=</op>
												<word>Reflect</word>
												<op>.</op>
												<word>getOwnPropertyDescriptor</word>
												<list>
													<word>object</word>
													<pn>,</pn>
													<word>key</word>
												</list>
											</expr>
											<pn>;</pn>
											<pair>
												<expr>
													<word>if</word>
													<list>
														<word>descriptor</word>
													</list>
													<word>return</word>
													<word>descriptor</word>
													<op>.</op>
													<word>enumerable</word>
													<op>?</op>
													<word>true</word>
												</expr>
												<word>false</word>
											</pair>
											<pn>;</pn>
										</body>
									</fn>
									<word>return</word>
									<word>undefined</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>describe</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>key</word>
							</list>
							<body>
								<expr>
									<fn>
										<word>while</word>
										<list>
											<word>object</word>
										</list>
										<body>
											<expr>
												<word>let</word>
												<word>descriptor</word>
												<op>=</op>
												<word>Reflect</word>
												<op>.</op>
												<word>getOwnPropertyDescriptor</word>
												<list>
													<word>object</word>
													<pn>,</pn>
													<word>key</word>
												</list>
											</expr>
											<pn>;</pn>
											<expr>
												<fn>
													<word>if</word>
													<list>
														<word>descriptor</word>
													</list>
													<body>
														<expr>
															<word>descriptor</word>
															<op>.</op>
															<word>name</word>
															<op>=</op>
															<word>key</word>
														</expr>
														<pn>;</pn>
														<expr>
															<word>descriptor</word>
															<op>.</op>
															<word>definedOn</word>
															<op>=</op>
															<word>object</word>
														</expr>
														<pn>;</pn>
														<expr>
															<word>return</word>
															<word>this</word>
															<op>.</op>
															<word>extend</word>
															<list>
																<word>Declaration</word>
																<pn>,</pn>
																<word>descriptor</word>
															</list>
														</expr>
														<pn>;</pn>
													</body>
												</fn>
												<word>object</word>
												<op>=</op>
												<word>this</word>
												<op>.</op>
												<word>prototypeOf</word>
												<list>
													<word>object</word>
												</list>
											</expr>
											<pn>;</pn>
										</body>
									</fn>
									<word>return</word>
									<word>Declaration</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>hasOwn</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>key</word>
							</list>
							<body>
								<expr>
									<word>return</word>
									<word>object</word>
									<op>&amp;&amp;</op>
									<word>typeof</word>
									<word>object</word>
									<op>==</op>
									<string>&quot;object&quot;</string>
									<op>&amp;&amp;</op>
									<word>OBJECT</word>
									<op>.</op>
									<word>hasOwnProperty</word>
									<op>.</op>
									<word>call</word>
									<list>
										<word>object</word>
										<pn>,</pn>
										<word>key</word>
									</list>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>extend</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>declarations</word>
							</list>
							<body>
								<expr>
									<word>if</word>
									<list>
										<expr>
											<op>!</op>
											<word>arguments</word>
											<op>.</op>
											<word>length</word>
										</expr>
									</list>
									<word>object</word>
									<op>=</op>
									<word>null</word>
								</expr>
								<pn>;</pn>
								<expr>
									<word>return</word>
									<word>this</word>
									<op>.</op>
									<word>implement</word>
									<list>
										<expr>
											<word>OBJECT</word>
											<op>.</op>
											<word>create</word>
											<list>
												<word>object</word>
											</list>
										</expr>
										<pn>,</pn>
										<word>declarations</word>
									</list>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>implement</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>declarations</word>
							</list>
							<body>
								<expr>
									<fn>
										<word>for</word>
										<list>
											<expr>
												<word>let</word>
												<word>name</word>
												<word>in</word>
												<word>declarations</word>
											</expr>
										</list>
										<body>
											<expr>
												<word>this</word>
												<op>.</op>
												<word>define</word>
												<list>
													<word>object</word>
													<pn>,</pn>
													<word>name</word>
													<pn>,</pn>
													<expr>
														<word>declarations</word>
														<array>
															<word>name</word>
														</array>
													</expr>
												</list>
											</expr>
											<pn>;</pn>
										</body>
									</fn>
									<word>return</word>
									<word>object</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>define</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>name</word>
								<pn>,</pn>
								<word>decl</word>
							</list>
							<body>
								<expr>
									<fn>
										<word>if</word>
										<list>
											<expr>
												<op>!</op>
												<word>this</word>
												<op>.</op>
												<word>isDeclaration</word>
												<list>
													<word>decl</word>
												</list>
											</expr>
										</list>
										<body>
											<expr>
												<word>decl</word>
												<op>=</op>
												<word>this</word>
												<op>.</op>
												<word>declare</word>
												<list>
													<word>decl</word>
													<pn>,</pn>
													<word>name</word>
												</list>
											</expr>
											<pn>;</pn>
											<expr>
												<word>decl</word>
												<op>.</op>
												<word>enumerable</word>
												<op>=</op>
												<word>true</word>
											</expr>
											<pn>;</pn>
											<expr>
												<word>decl</word>
												<op>.</op>
												<word>writable</word>
												<op>=</op>
												<word>true</word>
											</expr>
											<pn>;</pn>
											<expr>
												<word>decl</word>
												<op>.</op>
												<word>value</word>
												<op>=</op>
												<word>decl</word>
												<op>.</op>
												<word>source</word>
											</expr>
											<pn>;</pn>
										</body>
									</fn>
									<word>try</word>
									<body>
										<expr>
											<word>decl</word>
											<op>.</op>
											<word>define</word>
											<list>
												<word>object</word>
											</list>
										</expr>
										<pn>;</pn>
									</body>
									<fn>
										<word>catch</word>
										<list>
											<word>error</word>
										</list>
										<body>
											<expr>
												<word>this</word>
												<op>.</op>
												<word>error</word>
												<list>
													<word>error</word>
												</list>
											</expr>
											<pn>;</pn>
										</body>
									</fn>
									<word>return</word>
									<word>decl</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>defineInterface</word>
						<fn>
							<list>
								<word>object</word>
								<pn>,</pn>
								<word>name</word>
							</list>
							<body>
								<expr>
									<word>if</word>
									<list>
										<expr>
											<op>!</op>
											<word>object</word>
											<op>.</op>
											<word>sys</word>
										</expr>
									</list>
									<word>OBJECT</word>
									<op>.</op>
									<word>defineProperty</word>
									<list>
										<word>object</word>
										<pn>,</pn>
										<string>&quot;sys&quot;</string>
										<pn>,</pn>
										<body>
											<pair>
												<word>value</word>
												<word>this</word>
											</pair>
										</body>
									</list>
								</expr>
								<pn>;</pn>
								<expr>
									<word>if</word>
									<list>
										<word>name</word>
									</list>
									<word>OBJECT</word>
									<op>.</op>
									<word>defineProperty</word>
									<list>
										<word>object</word>
										<pn>,</pn>
										<expr>
											<word>Symbol</word>
											<op>.</op>
											<word>toStringTag</word>
										</expr>
										<pn>,</pn>
										<body>
											<pair>
												<word>value</word>
												<word>name</word>
											</pair>
										</body>
									</list>
								</expr>
								<pn>;</pn>
								<fn>
									<word>if</word>
									<list>
										<expr>
											<word>this</word>
											<op>.</op>
											<word>isInterface</word>
											<list>
												<expr>
													<word>this</word>
													<op>.</op>
													<word>prototypeOf</word>
													<list>
														<word>object</word>
													</list>
												</expr>
											</list>
										</expr>
									</list>
									<body>
										<expr>
											<word>OBJECT</word>
											<op>.</op>
											<word>defineProperty</word>
											<list>
												<word>object</word>
												<pn>,</pn>
												<word>INTERFACE</word>
												<pn>,</pn>
												<body>
													<pair>
														<word>value</word>
														<word>object</word>
													</pair>
												</body>
											</list>
										</expr>
										<pn>;</pn>
									</body>
								</fn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>declare</word>
						<fn>
							<list>
								<word>source</word>
								<pn>,</pn>
								<word>name</word>
								<pn>,</pn>
								<word>facet</word>
							</list>
							<body>
								<expr>
									<word>let</word>
									<word>prop</word>
									<op>=</op>
									<word>this</word>
									<op>.</op>
									<word>extend</word>
									<list>
										<word>Declaration</word>
									</list>
								</expr>
								<pn>;</pn>
								<expr>
									<word>if</word>
									<list>
										<word>name</word>
									</list>
									<word>prop</word>
									<op>.</op>
									<word>name</word>
									<op>=</op>
									<word>name</word>
								</expr>
								<pn>;</pn>
								<expr>
									<word>if</word>
									<list>
										<word>facet</word>
									</list>
									<word>prop</word>
									<op>.</op>
									<word>facet</word>
									<op>=</op>
									<word>facet</word>
								</expr>
								<pn>;</pn>
								<expr>
									<word>prop</word>
									<op>.</op>
									<word>source</word>
									<op>=</op>
									<word>source</word>
								</expr>
								<pn>;</pn>
								<expr>
									<word>return</word>
									<word>prop</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<word>error</word>
						<fn>
							<list>
								<word>error</word>
							</list>
							<body>
								<expr>
									<op>//</op>
									<word>TODO</word>
									<word>could</word>
									<word>add</word>
									<word>a</word>
									<word>debugger</word>
									<word>statement</word>
									<word>when</word>
									<word>environment</word>
									<word>is</word>
									<word>development</word>
									<op>.</op>
									<word>throw</word>
									<word>error</word>
								</expr>
								<pn>;</pn>
							</body>
						</fn>
					</pair>
					<pn>,</pn>
					<pair>
						<expr>
							<op>//</op>
							<word>TODO</word>
							<word>follow</word>
							<word>the</word>
							<word>standard</word>
						</expr>
						<pair>
							<expr>
								<word>package</word>
								<word>NOT</word>
								<word>packages</word>
								<op>.</op>
								<word>packages</word>
							</expr>
							<body></body>
						</pair>
					</pair>
				</body>
			</pair>
		</body>
	</expr>
</target>